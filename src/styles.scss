@use 'sass:map';
@use '@angular/material' as mat;
@use '@angular/material-experimental' as matx;
@use '@angular/material/core/theming/theming' as theming;

// Plus imports for other components in your app.

// Disable legacy API compatibility, since dev-app is fully migrated to theme inspection API.
theming.$theme-legacy-inspection-api-compatibility: false;

// Create a theme with the specified color type and density.
@function create-theme($type: dark, $density: 0, $primary: matx.$m3-cyan-palette, $tertiary: matx.$m3-orange-palette) {
  @return matx.define-theme((
    color: (
      theme-type: $type,
      primary: $primary,
      tertiary: $tertiary,
    ),
    density: (
      scale: $density
    ),
  ));
}

// Create our themes.
$dark-theme: create-theme($type: dark);
$light-theme: create-theme($type: light, $density: 0, $primary: matx.$m3-rose-palette, $tertiary: matx.$m3-red-palette);

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// **Be sure that you only ever include this mixin once!**
@include mat.core();


@mixin get-theme-color($prop, $theme, $role) {
  #{$prop}: mat.get-theme-color($theme, $role);
}

@mixin get-component-colors($theme) {
  @include get-theme-color(--mdc-elevated-card-container-color, $theme, surface-container);
  @include get-theme-color(--mat-expansion-container-background-color, $theme, surface-container);
  @include get-theme-color(--mat-sidenav-container-background-color, $theme, surface-container);
  @include get-theme-color(--mat-toolbar-container-background-color, $theme, surface-container);
  @include get-theme-color(--mat-menu-container-color, $theme, surface-container-highest);
}

@mixin get-theme-props() {
  --mat-sidenav-container-shape: 0px;
  --mat-list-active-indicator-shape: 0px;
}

// Include the default theme styles.
html {
  @include mat.all-component-themes($dark-theme);
  @include get-component-colors($dark-theme);
  @include mat.typography-hierarchy($dark-theme, $back-compat: true);
  @include get-theme-props();

  .surface-icon {
    @include mat.icon-color($dark-theme, $color-variant: surface);
  }

  .primary-icon {
    @include mat.icon-color($dark-theme, $color-variant: primary);
  }

  .secondary-icon {
    @include mat.icon-color($dark-theme, $color-variant: secondary);
  }

  .tertiary-icon {
    @include mat.icon-color($dark-theme, $color-variant: tertiary);
  }

  .error-icon {
    @include mat.icon-color($dark-theme, $color-variant: error);
  }

  &.strong-focus {
    @include mat.strong-focus-indicators-color($dark-theme);
  }
}

.light-theme {
  @include mat.all-component-colors($light-theme);
  @include mat.typography-hierarchy($light-theme, $back-compat: true);
  @include get-component-colors($light-theme);

  &.strong-focus {
    @include mat.strong-focus-indicators-color($light-theme);
  }

  .surface-icon {
    @include mat.icon-color($light-theme, $color-variant: surface);
  }

  .primary-icon {
    @include mat.icon-color($light-theme, $color-variant: primary);
  }

  .secondary-icon {
    @include mat.icon-color($light-theme, $color-variant: secondary);
  }

  .tertiary-icon {
    @include mat.icon-color($light-theme, $color-variant: tertiary);
  }

  .error-icon {
    @include mat.icon-color($light-theme, $color-variant: error);
  }

}

.strong-focus {
  // Note: we can theme the indicators directly through `strong-focus-indicators` as well.
  // Use the theme so we have some coverage over the entire API surface.
  @include mat.strong-focus-indicators();
  @include mat.strong-focus-indicators-theme($dark-theme);
}

// Create classes for all density scales which are supported by all MDC-based components.
// The classes are applied conditionally based on the selected density in the dev-app layout
// component.
$density-scales: (-1, -2, -3, -4, minimum, maximum);
@each $scale in $density-scales {
  .density-#{$scale} {
    $density-theme: create-theme($density: $scale);
    @include mat.all-component-densities($density-theme);
  }
}

// In M3 buttons are smaller than their touch target at zero-density.
.config-buttons button {
  margin: 4px;
}

html, body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  background-color: var(--mat-app-background-color);
}

.mat-expansion-panel-body {
  padding: 0 !important;
}

span.spacer {
  flex: 1 1 auto;
}

